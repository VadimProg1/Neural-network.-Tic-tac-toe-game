#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <vector>
#include <random>
#include <cmath>
#include <fstream>
using namespace std;

const int amount_of_layers = 3,
amount_of_hidden_layers = 1,
size_of_input = 16,
size_of_output = 16,
size_of_hidden_layer = 21;

double sigmoid(double x)
{
	return 1 / (1 + exp(-x));
}

double fill_neuron(vector<vector<pair<double, double>>>& neurons, vector<vector<vector<double>>> w, int index_prev_layer, double size_of_layer, double index, vector<vector<double>> bias)
{
	double sum = 0, result;
	for (int j = 0; j < size_of_layer; j++) {
		sum += neurons[index_prev_layer][j].first * w[index_prev_layer][j][index];
	}
	sum += bias[index_prev_layer][index];
	return sigmoid(sum);
}

void fill_neurons(vector<vector<pair<double, double>>>& neurons, vector<vector<vector<double>>> w, vector<double> size_neurons, vector<double> input, vector<vector<double>> bias)
{
	vector<pair<double, double>> temp1;
	for (int i = 0; i < size_of_input; i++)
	{
		double input1;
		input1 = input[i];
		temp1.push_back(make_pair(input1, 0));
	}
	neurons.push_back(temp1);
	for (int i = 1; i < size_neurons.size(); i++)
	{
		vector<pair<double, double>> temp2;
		for (int j = 0; j < size_neurons[i]; j++)
		{
			double temp1 = fill_neuron(neurons, w, i - 1, size_neurons[i - 1], j, bias);
			temp2.push_back(make_pair(temp1, 0));
		}
		neurons.push_back(temp2);
	}
}

void fill_size_neural_network(vector<double>& size)
{
	size.push_back(size_of_input);
	for (int i = 0; i < amount_of_hidden_layers; i++)
	{
		size.push_back(size_of_hidden_layer);
	}
	size.push_back(size_of_output);

}


void fill_network(vector<vector<pair<double, double>>>& neurons, vector<vector<vector<double>>>& w, vector<double> size_neurons, vector<double> input, vector<vector<double>> bias)
{
	for (int i = 0; i < input.size(); i++) {
		neurons[0][i].first = input[i];
	}
	for (int i = 1; i < size_neurons.size(); i++)
	{
		for (int j = 0; j < size_neurons[i]; j++)
		{
			neurons[i][j].first = fill_neuron(neurons, w, i - 1, size_neurons[i - 1], j, bias);
		}
	}
}

vector<vector<double>> Read() {
	vector<vector<double>> inputs;
	vector<double> temp2;
	for (int j = 0; j < 16; j++) {
		char temp;
		double temp1;
		cin >> temp;
		if (temp == '.') {
			temp1 = 0;
		}
		else if (temp == 'X') {
			temp1 = 1;
		}
		else if (temp == 'O') {
			temp1 = -1;
		}
		temp2.push_back(temp1);
	}
	inputs.push_back(temp2);
	return inputs;
}

void Print(vector<vector<pair<double, double>>> neurons) {
	double temp = -1;
	int result;
	for (int j = 0; j < size_of_output; j++) {
		if (neurons[amount_of_layers - 1][j].first > temp) {
			result = j;
			temp = neurons[amount_of_layers - 1][j].first;
		}
	}
	cout << (result / 4) + 1 << " " << (result % 4) + 1 << endl;
}

int main()
{
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);

	vector<vector<vector<double>>> w{ {{-1.05009, -1.24203, -0.197258, 1.31345, 0.401365, 0.903253, 0.221858, 8.3155, 0.378857, -0.19027, 1.04138, -0.652425, -0.895641, 0.776722, 1.6056, -1.04736, 14.139, -0.821131, 0.0233863, -1.19701, -0.0816003, },
	{-0.831381, -1.49676, 0.740684, 1.37589, 0.359301, -0.15454, 0.207395, -0.445909, -0.697364, -0.796128, 0.0290505, 0.00843744, -0.185286, 1.98194, 13.4122, -0.650691, 1.40831, 0.673997, 0.0249405, -0.811084, 7.83915, },
	{0.466657, -1.26747, 0.0456836, 1.35269, -0.0580243, -0.688053, 0.386541, -0.441454, -0.849459, -0.312071, -0.042341, -0.355314, 8.63319, 13.46, 2.07985, -1.06847, 0.402172, -0.143823, 0.067489, 0.850699, -0.782883, },
	{-1.13095, 2.05328, -0.443677, 15.9585, 0.595909, -0.814175, -0.729711, -0.201053, -0.449385, 1.89396, -0.953747, -1.28635, -0.772632, 1.88436, 0.403749, 1.57731, 1.77982, -0.292169, 0.373974, -1.04661, -0.565947, },
	{0.146878, 0.189706, -0.50365, -1.02638, -2.20277, 0.811196, 1.0628, 8.3351, 1.62552, -1.38548, 13.5272, 1.12647, -0.478463, -0.311875, -0.351284, -1.47395, 1.80423, -2.44364, 0.320249, 0.278998, -0.338464, },
	{-0.195511, 1.20624, 0.200222, -0.76912, -1.2938, 0.0130601, 1.21584, -0.401197, -0.348419, -0.945856, 0.39546, 14.5541, -1.04918, -0.433128, 0.963413, -0.760552, -0.633275, 0.801491, 0.436411, 0.281712, 7.90627, },
	{1.16097, 1.7878, -0.487872, -1.32444, 3.07393, -0.514749, 14.6013, 0.134745, -0.634169, -0.681564, 1.63757, 0.963966, 8.63271, 0.793326, -1.01136, -1.11848, -0.148973, -1.04579, -0.162126, -0.914643, 0.122101, },
	{-0.555829, 16.3245, -0.21231, 1.78075, -2.12203, -1.05819, 1.68154, -0.144805, 0.0590631, 1.13508, 1.31422, 1.36452, -0.135896, -0.929646, -1.2816, 1.52761, -0.167367, -1.06077, 0.398908, 1.67244, -0.0834138, },
	{-1.2429, -0.854931, 0.391449, -1.21727, -0.190413, 1.63448, 0.0320309, 8.45945, 10.2681, 1.19921, 2.24087, -0.88697, -0.341217, 0.118352, -0.377463, -1.15038, 0.823814, -0.688653, -7.94016, 0.329096, -0.208375, },
	{-1.37674, -1.60384, 10.4905, -0.964692, -0.330056, 0.00642061, -0.708881, -0.356102, 0.740659, 0.464546, -0.381833, 0.721099, -0.516715, -0.686071, 0.354172, -0.645263, -1.00561, 0.849927, -7.95544, 0.439384, 8.61538, },
	{1.53725, -1.3835, 0.953946, -1.41889, 10.9366, -0.099159, 2.00037, -0.092482, 1.1227, 0.89573, -0.45092, -0.868231, 8.80791, 1.46645, -0.536623, -0.868607, -0.486406, 0.141368, -7.92173, 10.9407, 0.466034, },
	{-0.338094, 1.9157, -0.140551, 1.52163, 0.434759, -1.52608, -0.989862, -0.181969, 0.540186, 13.4542, -0.226053, -1.62498, -0.0240995, -0.626658, -0.982934, 2.17451, -1.27476, -0.311578, -7.7464, 0.505118, -0.0379536, },
	{1.57409, -0.39387, -0.572911, -0.202099, 0.183395, 13.0022, -0.927019, 8.84471, 0.142456, 0.0328836, 0.255752, 0.0352471, -0.554472, -0.245361, 0.0396401, 0.770897, 1.0747, 0.710434, -0.136646, -0.285407, -0.349139, },
	{0.631855, -0.388078, 0.489246, -0.753845, -0.581596, 2.31103, -0.635589, -0.427422, -0.401171, -0.107492, -0.358674, 1.23644, 0.255381, -0.0104831, 0.857008, 0.846629, -0.75904, 14.435, 0.0773572, -0.182226, 7.9867, },
	{14.3297, -0.848439, -0.401349, -1.28168, 0.754515, 1.18, 0.238376, -0.156113, 0.0512246, -0.422385, 0.323574, -0.347261, 8.13583, 0.471594, -0.426077, 1.03995, -0.82526, 1.65762, 0.118282, 0.881789, -0.646942, },
	{1.02213, 0.317314, -0.441118, 1.66767, -0.0742981, 1.58098, -0.188816, -0.360762, -0.446727, 1.44727, -0.52714, -1.38274, -0.256609, -1.20541, -0.990696, 15.1645, -1.03541, 1.13007, 0.132314, -0.380193, -0.494598, },
	} ,

	{{-0.490551, -0.222665, 0.91905, -1.61772, -0.759287, -0.470191, 0.522115, -0.780739, -0.569711, -0.0316822, -0.16971, -0.399134, 4.39011, 3.22121, -15.5564, 2.66629, },
	{-1.43575, -1.1995, -0.853916, 3.59271, 2.17116, 2.24533, 2.94448, -11.9861, -0.610326, -0.597862, -0.735098, 4.09629, -0.946068, -1.70745, -1.26965, 3.05695, },
	{0.0907589, 1.26732, 0.0588527, 0.300686, -0.316083, 1.34647, -0.516684, -0.225657, 1.19557, -14.9433, 0.723177, 1.03153, -0.504372, 1.23884, -0.201624, 0.0949405, },
	{2.88284, 2.62736, 3.84675, -12.1469, -1.34079, -1.08969, -0.826707, 3.12907, -1.06941, -0.476037, -0.709534, 3.51358, -1.10779, -1.0844, -1.25707, 2.81503, },
	{0.431777, 0.216981, 1.3606, 0.273963, -1.70168, -2.52961, 2.24935, -1.68534, 1.2427, 1.33239, -10.8919, 1.35297, 0.53211, 0.384858, 0.423328, 0.469701, },
	{-0.0398704, -1.27302, -1.36531, -1.12918, -0.366867, -1.8135, -0.864666, -1.41176, -0.523471, -1.47649, -0.462794, -0.0524504, -16.6793, 4.41631, 4.09601, 3.92371, },
	{-0.403761, -0.534872, -0.0951256, -0.795656, 3.2495, 3.74952, -16.245, 4.19753, -0.507653, -0.521497, -0.978089, -0.125452, -1.19133, -0.571861, 0.493145, -1.22246, },
	{8.70273, -1.74082, -1.66333, -2.47474, 7.80169, -2.94967, -2.55989, -2.98083, 7.50256, -2.5982, -1.9827, -2.32757, 4.67625, -3.65619, -3.7919, -3.29745, },
	{0.0737705, -0.00452367, 0.183243, -0.21635, 1.40191, -0.416626, -0.768796, -0.905385, -15.7226, 0.74916, 0.411618, 1.42783, 2.29816, 0.659839, -0.373093, 0.121331, },
	{-0.618474, -0.349736, -0.297282, 3.8887, -0.2089, -0.743867, -0.775419, 3.82036, 0.00661281, 0.779109, -0.430434, -16.0304, 0.26532, -0.0672246, -1.68511, 3.42673, },
	{0.689243, -0.778349, -0.365152, -1.52314, -15.4906, 4.04276, 3.88686, 3.0734, -0.471883, -0.18973, -0.923652, -0.794825, 1.47034, -1.39828, -0.578345, -1.28391, },
	{-0.20315, 0.182392, 0.250443, -0.745948, 4.42594, -15.5636, 3.36926, 3.86564, -1.08175, 1.08727, -0.0303034, -0.889866, -0.828041, 0.15121, -0.220879, -1.15425, },
	{-2.48353, -2.89562, 6.84186, -2.42912, -2.14206, -2.60908, 7.12746, -3.15859, -1.94477, -0.831893, 6.56311, -2.98745, -3.35247, -4.25964, 5.59153, -2.82813, },
	{3.05965, 4.50131, -16.0126, 3.87925, -0.762369, -0.893733, -0.250653, -1.1216, -0.406534, -0.444211, -0.275639, -0.112719, -0.61953, -0.741079, -0.222334, -0.598566, },
	{3.75853, -15.8913, 4.24658, 3.94201, -0.729996, -0.260956, -0.358117, -1.2762, -0.317836, 1.0152,

	-0.861912, -0.460229, -0.550884, 0.430215, -1.45306, -1.26785, },
	{-1.44176, -1.01666, -0.923414, 3.48256, -0.785711, -1.03234, -2.17048, 4.50727, -0.634771, -0.734629, -1.23834, 3.69136, 2.51134, 1.28605, 2.49954, -12.186, },
	{-15.7684, 3.75894, 3.14367, 3.59842, 0.366532, -0.323123, 0.0977991, -1.50672, -0.133164, 0.285017, -0.914333, -0.281355, 1.80409, -1.18948, -0.781373, -1.18599, },
	{-0.0752724, 0.96099, 0.253718, -0.937418, -1.11775, 1.1669, -0.567268, -1.28247, -1.11101, 0.647368, -0.0356955, -0.312808, 3.89157, -15.0137, 2.02005, 3.01696, },
	{1.67091, 2.47438, 2.09035, 3.95293, 1.3964, 2.6762, 2.57834, 3.0556, -5.52275, -5.9544, -5.86112, -7.97409, 2.87776, 3.07942, 3.35626, 3.46645, },
	{-0.216977, -1.4988, 2.27755, -1.10279, 1.38489, 0.943155, 1.46697, -0.238865, 1.08346, 0.929934, -11.4834, 1.04266, -0.51414, -0.255396, 0.997957, -1.29249, },
	{-1.89246, 7.12652, -3.1944, -3.20405, -2.06513, 5.66897, -2.48066, -2.59732, -0.553253, 5.93068, -2.21465, -2.03029, -3.3402, 6.85987, -2.19353, -3.12524, },
	} }, print;
	vector<vector<double>> inputs, bias{ { -13.5997, -15.8176, -9.54159, -15.9931, -12.5719, -13.2181, -12.7645, -20.5979, -8.7477, -12.4217, -12.4047, -13.2608, -21.1416, -12.9637, -12.1158, -14.3349, -12.7608, -11.6944, 18.1113, -8.9917, -19.7052, } ,
	{ -8.15512, -9.06123, -9.76025, -11.1532, -7.88127, -8.19142, -8.52431, -10.2782, 1.10706, 0.900779, 2.51457, -1.07774, -10.7872, -7.10939, -7.61594, -9.87544, } };
	vector<double> size_of_neural_network;
	vector<vector<pair<double, double>>> neurons;
	inputs = Read();
	fill_size_neural_network(size_of_neural_network);
	fill_neurons(neurons, w, size_of_neural_network, inputs[0], bias);
	fill_network(neurons, w, size_of_neural_network, inputs[0], bias);
	Print(neurons);
	return 0;
}